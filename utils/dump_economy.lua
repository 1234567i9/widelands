-- This file can be used inside a debug build of widelands. It will dump the
-- economy of one player as a lua script which can be used in scenarios. The
-- state will be as complete as possible given the limitations of the current
-- state of the Lua engine. 
--
-- Usage:
-- Press F6 to open the debug console (need a debug build for that).
-- dofile("utils/dump_economy.lua")
-- dump(plrno, filename = "eco_dump.lua")
--
-- Note that the player must own his starting position and have a headquarters there,
-- its contents will *not* be dumped. Also: constructionsites will be completely ignored.
--
-- Its flag will be the base for the graph traversal used. Therefore if he has more
-- than one economy, this script will only dump one of it.

use("aux", "set")

game = wl.Game()
map = game.map

function traverse_economy(plr, flag)
   local rv = {
      flags = {},
      roads = {},
      buildings = {}
   }

   local roads_done = Set:new{}
   local flags_done = Set:new{}
   local buildings_done = Set:new{}

   local flags_to_check = Set:new{flag}

   local _handle_flag = function (f) 
      if flags_done:contains(f) then return end
      rv.flags[#rv.flags + 1] = f
      flags_to_check:add(f)
   end
   local _discover_road = function (r)
      if roads_done:contains(r) then return end
      rv.roads[#rv.roads + 1] = r
      roads_done:add(r)
   end
   local _discover_building = function (b)
      if buildings_done:contains(b.fields[1]) then return end
      rv.buildings[#rv.buildings + 1] = b
      buildings_done:add(b.fields[1])
   end

   while flags_to_check.size > 0 do
      local flag = flags_to_check:pop_at(1)
      local f = flag.fields[1]

      flags_done:add(flag)

      for idx,n in ipairs{f.rn, f.brn, f.bln, f.ln, f.tln, f.trn} do
         if n.immovable and n.immovable.owner == plr then
            if n.immovable.type == "road" then
               local r = n.immovable
               if r.start_flag == flag then
                  _handle_flag(r.end_flag)
                  _discover_road(r)
               elseif r.end_flag == flag then
                  _handle_flag(r.start_flag)
                  _discover_road(r)
               end
            elseif n.immovable.type == "constructionsite" or n.immovable.type == "dismantlesite" then
               print(("IGNORING constructionsite/dismantlesite at %s"):format(tostring(n)))
            elseif n.immovable.type:sub(-4) == "site" or n.immovable.type == "warehouse" then
               _discover_building(n.immovable)
            else
               print("UNKNOWN immovable type: ", n.immovable.type)
               assert(nil)
            end
         end
      end
   end

   return rv
end

function write_header(f, plr) 
   f:write(([[--- Automatically generated by utils/dump_economy.lua
function create_economy_for_plr_3()
   local plr = wl.Game().players[%i]
   local map = wl.Game().map]]):format(plr.number))
   f:write("\n\n")
end
function write_footer(f, plr) 
   f:write("end\n")
end

function write_flags(f, flags) 
   f:write("   -- Flags {{{\n   local flag")
   for idx,flag in ipairs(flags) do
      f:write(("   flag = plr:place_flag(map:get_field(%i,%i),true)\n"):format(flag.fields[1].x, flag.fields[1].y))
      for ware,count in pairs(flag:get_wares("all")) do
         f:write(("    flag:set_wares('%s',%i)\n"):format(ware,count));
      end
   end
   f:write("   -- End of Flags }}}\n")
end

function write_roads(f, roads) 
   local _find_directions = function(r) 
      local lf = nil
      local f = r.start_flag.fields[1]
      local steps = {}
      local _step = function (d) 
         steps[#steps+1] = ([["%s"]]):format(d)
         f, lf = f[d..'n'], f
      end
      local flag_found = false
      while not flag_found do
         for idx,nn in ipairs{"r", "br", "bl", "l", "tl", "tr"} do
            local n = f[nn .. "n"]
            if n.immovable == r and lf ~= n then
               _step(nn)
               break
            elseif n.immovable == r.end_flag then
               _step(nn)
               flag_found = true
               break
            end
         end
      end

      return steps
   end

   f:write("   -- Roads {{{\n   local road\n")
   for idx,road in ipairs(roads) do
      local dirs = table.concat(_find_directions(road), ',')
      f:write(("   road = plr:place_road(map:get_field(%i,%i).immovable,%s,true)\n"):format(
         road.start_flag.fields[1].x, road.start_flag.fields[1].y, dirs)
      )
      -- TODO: donkey is not supported currently, nor is business of roads
      f:write(("    road:set_workers('carrier',%i)\n"):format(road:get_workers("carrier")));
   end
   f:write("   -- End of Roads }}}\n")
end

function write_buildings(f, buildings)
   f:write("   -- Buildings {{{\n   local building\n")
   for idx,building in ipairs(buildings) do
      f:write(("   building = plr:place_building('%s', map:get_field(%i,%i),false,true)\n"):format(
         building.name, building.fields[1].x, building.fields[1].y)
      )

      -- Transfer wares
      if building.get_wares then
         for name,count in pairs(building:get_wares("all")) do
               f:write(("    building:set_wares('%s', %i)\n"):format(name, count))
         end
      end

      -- Transfer workers
      if building.get_workers then
         for name,count in pairs(building:get_workers("all")) do
               f:write(("    building:set_workers('%s', %i)\n"):format(name, count))
         end
      end

      -- Transfer soldiers
      if building.get_soldiers then
         for sdescr,count in pairs(building:get_soldiers("all")) do
               f:write(("    building:set_soldiers({%i,%i,%i,%i}, %i)\n"):format(
                  sdescr[1], sdescr[2], sdescr[3], sdescr[4], count)
               )
         end
      end
   end
   f:write("   -- End of Buildings }}}\n")
end

function dump(plrno, g_filename) 
   local f = io.open(g_filename or "eco_dump.lua", "w")

   local plr = game.players[plrno]
   local start_flag = map.player_slots[plrno].starting_field.brn.immovable
   assert(start_flag.type == "flag")

   local eco = traverse_economy(plr, start_flag)

   write_header(f, plr)
   write_flags(f, eco.flags)
   write_roads(f, eco.roads)
   write_buildings(f, eco.buildings)
   write_footer(f, plr)

   f:close()

end
